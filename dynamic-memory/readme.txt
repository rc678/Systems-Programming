Our implementation of malloc runs in worst case and best case big O(n) time. We use a global array called heap to act as dynamic memory. The array contains memEntries, which are structs that are placeholders in memory. When malloc is first called, we initialize the root by setting it to the first memEntry. When malloc is called more than once, we must check multiple conditions while traversing the heap. If the pointer's size is less than the size of the data we want to malloc or if the pointer is pointing to a memEntry that is not free, we move the pointer to the next location. 
